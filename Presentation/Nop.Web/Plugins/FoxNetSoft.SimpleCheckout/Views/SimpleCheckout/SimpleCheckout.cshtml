@model SimpleCheckoutModel
@using Nop.Core.Domain.Orders;
@using Nop.Web.Models.Checkout;
@using Nop.Web.Models.Common;
@using FoxNetSoft.Plugin.Misc.SimpleCheckout.Models;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    Html.AddCssFileParts("~/Plugins/FoxNetSoft.SimpleCheckout/Styles/styles.css");   
    string shippingoptiontag="";
    if (!Model.RequiresShipping)
    {
        shippingoptiontag="style=display:none";
    }
}
<script type="text/javascript">
    $(document).ready(function () {
        $("#shippingoption").change(function() 
        {
            adjustOrderSummary();
            $('#message-error-shipping ul').html('');
            $('#message-error ul').html('');
        });
        $("#paymentmethod").change(function() 
        {
            adjustOrderSummary();
            adjustPaymentInfo();
            $('#message-error-payment ul').html('');
            $('#message-error ul').html('');
        });
    });

    function sc_AjaxShippingMethod_success(response) {
        var ddlwarning = $('#message-error-shipping ul');
        ddlwarning.html('');
        if (response.warnings) {
            $.each(response.warnings, function (id, idata) {
                ddlwarning.append('<li>' + idata + '</li>');
            });
        }
        if (response.shippingmethods) {
            if (response.addressid > 0) {
                $("#@Html.FieldIdFor(model => model.ShippingAddress.Id)").val(response.addressid);
            }
            var ddlshippingoption = $('#shippingoption');
            ddlshippingoption.html('');
            $.each(response.shippingmethods, function (id, idata) {
                var newoption = '<option selected=' + idata.Selected + ' value="' + idata.Name + '___' + idata.ShippingRateComputationMethodSystemName + '">' + idata.Name;
                if (idata.Fee && idata.Fee.length > 0)
                    newoption = newoption + '(' + idata.Fee + ')';
                newoption = newoption + '</option>';
                ddlshippingoption.append(newoption);
            });
            ddlshippingoption.change();
        }
        $("#shipmentmethods-loading-progress").hide();
        return true;
    }
    function sc_AjaxPaymentMethod_success(response) {
        var ddlwarning = $('#message-error-payment ul');
        ddlwarning.html('');
        if (response.warnings) {
            $.each(response.warnings, function (id, idata) {
                ddlwarning.append('<li>' + idata + '</li>');
            });
        }
        if (response.paymentmethods) {
            if (response.addressid > 0) {
                if ($("#@Html.FieldIdFor(model => model.UseDifferentAddressForBilling)").prop("checked")) {
                    $("#@Html.FieldIdFor(model => model.BillingAddress.Id)").val(response.addressid);
                }
                else {
                    $("#@Html.FieldIdFor(model => model.ShippingAddress.Id)").val(response.addressid);
                }
            }
            var ddlpaymentmethod = $('#paymentmethod');
            ddlpaymentmethod.html('');
            $.each(response.paymentmethods, function (id, idata) {
                var newoption = '<option selected=' + idata.Selected + ' value="' + idata.PaymentMethodSystemName + '">' + idata.Name;
                if (idata.Fee && idata.Fee.length > 0)
                    newoption = newoption + '(' + idata.Fee + ')';
                newoption = newoption + '</option>';
                ddlpaymentmethod.append(newoption);
            });
            ddlpaymentmethod.change();
        }
        $("#paymentmethods-loading-progress").hide();
        return true;
    }

    function sc_GetddlPaymentMethodValue() {
        return $("#paymentmethod").val();
        //return $("input[name='paymentmethod']:checked").val();
    }
    function sc_GetddlShippingMethodValue() {
        return $("#shippingoption").val();
        //return $("input[name='shippingoption']:checked").val();
    }

</script>

<div class="page simple-checkout-page">
    @Html.Partial(Model.GetViewPath("_SimpleCheckoutScript"), Model)
    <div class="page-title">
        <h1>@T("PageTitle.Checkout")</h1>
    </div>
    <div class="clear">
    </div>
    <div class="page-body simple-checkout-data">
        @*@if (Model.IsGuest)
        {
        <div>
            <p>@T("FoxNetSoft.Plugin.Misc.SimpleCheckout.MessageForLogin") <a href="@Url.RouteUrl("Login")" class="ico-login">@T("Account.Login")</a></p>
        </div>
        }*@
           @using (Html.BeginRouteForm("Checkout", FormMethod.Post, new { id = "form-fns-simplecheckout"}))
           {
                @Html.HiddenFor(model => model.isPaymentWorkflowRequired)               
                @Html.HiddenFor(model => model.RequiresShipping)   
                <table class="simple-checkout-table">
                    @Html.Partial(Model.GetViewPath("_ShippingAddress"), Model)
                        @*<tr style="display:none">*@
                        <tr @shippingoptiontag>
                            <td>
                               @Html.NopLabelFor(model => model.Shippingoption):
                            </td>
                            <td>
                                <select name="shippingoption" id="shippingoption">
                                    @foreach (var shippingMethod in Model.ShippingMethods)
                                    {
                                        <option selected="@shippingMethod.Selected" value="@(shippingMethod.Name)___@(shippingMethod.ShippingRateComputationMethodSystemName)">@shippingMethod.Name @(!String.IsNullOrEmpty(shippingMethod.Fee) ? " (" + shippingMethod.Fee + ")" : "")
                                        </option>
                                    }
                                </select>
                                <span id="shipmentmethods-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                            </td>
                        </tr>


                    @if (Model.isPaymentWorkflowRequired)
                    {
                        <tr>
                            <td>
                               @Html.NopLabelFor(model => model.Paymentmethod):
                            </td>
                            <td>
                                <select name="paymentmethod" id="paymentmethod">
                                    @foreach (var paymentMethod in Model.PaymentMethods)
                                    {
                                         <option selected="@paymentMethod.Selected" value="@(paymentMethod.PaymentMethodSystemName)">@paymentMethod.Name 
                                         @if (!String.IsNullOrEmpty(paymentMethod.Fee))
                                         {
                                             @paymentMethod.Fee
                                         }
                                         </option>
                                    }
                                </select>
                                <span id="paymentmethods-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                            </td>
                        </tr>  
                        <tr>
                            <td colspan="2" class="simple-checkout-paymentinfo-table-td">
		                        <div class="simple-checkout-paymentinfo">
		                        </div>
                            </td>
                        </tr>
                    }                
                    @if (Model.DiscountBox.Display || Model.GiftCardBox.Display)
                    {
                        @Html.Partial(Model.GetViewPath("_DiscountGift"), Model)
                    }
                    @if (Model.IsAllowCustomerToWriteComment)
                    {
                        <tr>
                            <td>
                               @Html.NopLabelFor(model => model.CustomerComment):
                            </td>
                            <td>
                               @Html.TextAreaFor(model => model.CustomerComment)
                            </td>
                        </tr>  
                    }                

                        <tr>
                            <td colspan="2" width="100%">                    
                                <div class="clear">
                                </div>
                                <div class="message-error" id="message-error">
                                    <ul>
                                        @for (int i = 0; i < Model.Warnings.Count; i++)
                                        {
                                            <li>@Model.Warnings[i]</li>
                                        }
                                    </ul>
                                </div>
                                <div class="message-error" id="message-error-shipping">
                                    <ul>
                                        @for (int i = 0; i < Model.WarningsShipping.Count; i++)
                                        {
                                            <li>@Model.WarningsShipping[i]</li>
                                        }
                                    </ul>
                                </div>
                                <div class="message-error" id="message-error-payment">
                                    <ul>
                                        @for (int i = 0; i < Model.WarningsPayment.Count; i++)
                                        {
                                            <li>@Model.WarningsPayment[i]</li>
                                        }
                                    </ul>
                                </div>
                            </td>
                        </tr>
                       <tr>
                       <td colspan="2" width="100%">
                            @if (!String.IsNullOrEmpty(Model.MinOrderTotalWarning))
                            {
                                <span class="min-order-warning">@Model.MinOrderTotalWarning</span>
                            }
                            else
                            {
                                if (Model.TermsOfServiceOnOrderConfirmPage)
                                {
                                    <div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display:none;">
                                        <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                                    </div>
                                    <div class="terms-of-service">
                                        <input id="termsofservice" type="checkbox" name="termsofservice" />
                                        @T("Checkout.TermsOfService.IAccept")
                                        <span class="read" onclick="javascript:OpenWindow('@Url.RouteUrl("TopicPopup", new { SystemName = "conditionsofUse" })', 450, 500, true)">@T("Checkout.TermsOfService.Read")</span>
                                    </div>
                                }
                                <div class="buttons">
                                    <input type="submit" name="save" value="@T("Checkout.ConfirmButton")" class="button-1 confirm-order-next-step-button" />
                                </div>
                            }
                       </td>
                       </tr>
                </table>
           }

		<div class="simple-checkout-order-summary-body">
			@*@Html.Action("OrderSummary", "ShoppingCart")*@
		</div>
    </div>
</div>
